<?php

namespace StructType;

use \WsdlToPhp\PackageBase\AbstractStructBase;

/**
 * This class stands for FaultDescriptorType StructType
 * Meta informations extracted from the WSDL
 * - documentation: Basic type used as an 'exception' that is thrown by a WebMethodin case of errors when it was not possible to achieve the desired result resp. to create the desired return value.In the majority of cases it can be assumed, that the
 * underlying business transaction was rolled back when a Fault is thrown and therefore no change was made in the database.
 * @subpackage Structs
 */
class FaultDescriptorType extends AbstractStructBase
{
    /**
     * The Code
     * Meta informations extracted from the WSDL
     * - documentation: Error code used in the fault message to precisely identify the type of internal exception/error that occurred during processing of the WebService request. In most cases, this is an error code generated by a business logic component
     * and can be interpreted in its context.
     * @var string
     */
    public $Code;
    /**
     * The Message
     * Meta informations extracted from the WSDL
     * - documentation: Error message used in the fault message to give a humans a readable and interpretable indication concerning what went wrong during processing of the WebService request. In contrast to the error code, this message string might be
     * translated and therefore available in the customization's preferred language.
     * @var string
     */
    public $Message;
    /**
     * The RequestID
     * Meta informations extracted from the WSDL
     * - documentation: Unique identifier of request; helps finding error in log files | Data type to represent object identifiers that is valid 'outside' our system. It is used in certain scenarios when data is inserted into the PAYBACK system that
     * possesses valid unique identifiers in other systems of a partner. Example: A member enrollment request sent by a PAYBACK partner could contain an external reference id for the member (e.g. his customer number at the partner which is not unique in
     * PAYBACK but unique within the partner's organization). The same data format is used for external identifiers that must be loaded during data migration from old systems.
     * - minOccurs: 0
     * - maxLength: 36
     * - minLength: 1
     * @var string
     */
    public $RequestID;
    /**
     * Constructor method for FaultDescriptorType
     * @uses FaultDescriptorType::setCode()
     * @uses FaultDescriptorType::setMessage()
     * @uses FaultDescriptorType::setRequestID()
     * @param string $code
     * @param string $message
     * @param string $requestID
     */
    public function __construct($code = null, $message = null, $requestID = null)
    {
        $this
            ->setCode($code)
            ->setMessage($message)
            ->setRequestID($requestID);
    }
    /**
     * Get Code value
     * @return string|null
     */
    public function getCode()
    {
        return $this->Code;
    }
    /**
     * Set Code value
     * @param string $code
     * @return \StructType\FaultDescriptorType
     */
    public function setCode($code = null)
    {
        // validation for constraint: string
        if (!is_null($code) && !is_string($code)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($code)), __LINE__);
        }
        $this->Code = $code;
        return $this;
    }
    /**
     * Get Message value
     * @return string|null
     */
    public function getMessage()
    {
        return $this->Message;
    }
    /**
     * Set Message value
     * @param string $message
     * @return \StructType\FaultDescriptorType
     */
    public function setMessage($message = null)
    {
        // validation for constraint: string
        if (!is_null($message) && !is_string($message)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($message)), __LINE__);
        }
        $this->Message = $message;
        return $this;
    }
    /**
     * Get RequestID value
     * @return string|null
     */
    public function getRequestID()
    {
        return $this->RequestID;
    }
    /**
     * Set RequestID value
     * @param string $requestID
     * @return \StructType\FaultDescriptorType
     */
    public function setRequestID($requestID = null)
    {
        // validation for constraint: maxLength
        if ((is_scalar($requestID) && strlen($requestID) > 36) || (is_array($requestID) && count($requestID) > 36)) {
            throw new \InvalidArgumentException(sprintf('Invalid length, please provide an array with 36 element(s) or a scalar of 36 character(s) at most, "%d" length given', is_scalar($requestID) ? strlen($requestID) : count($requestID)), __LINE__);
        }
        // validation for constraint: minLength
        if ((is_scalar($requestID) && strlen($requestID) < 1) || (is_array($requestID) && count($requestID) < 1)) {
            throw new \InvalidArgumentException('Invalid length, please provide an array with 1 element(s) or a scalar of 1 character(s) at least', __LINE__);
        }
        // validation for constraint: string
        if (!is_null($requestID) && !is_string($requestID)) {
            throw new \InvalidArgumentException(sprintf('Invalid value, please provide a string, "%s" given', gettype($requestID)), __LINE__);
        }
        $this->RequestID = $requestID;
        return $this;
    }
    /**
     * Method called when an object has been exported with var_export() functions
     * It allows to return an object instantiated with the values
     * @see AbstractStructBase::__set_state()
     * @uses AbstractStructBase::__set_state()
     * @param array $array the exported values
     * @return \StructType\FaultDescriptorType
     */
    public static function __set_state(array $array)
    {
        return parent::__set_state($array);
    }
    /**
     * Method returning the class name
     * @return string __CLASS__
     */
    public function __toString()
    {
        return __CLASS__;
    }
}
